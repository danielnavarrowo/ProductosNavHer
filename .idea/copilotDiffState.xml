<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/navher/myapplication/ui/screens/LoginScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/navher/myapplication/ui/screens/LoginScreen.kt" />
              <option name="originalContent" value="package com.navher.myapplication.ui.screens&#10;&#10;import android.util.Patterns&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.expandVertically&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.shrinkVertically&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.BasicTextField&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.foundation.text.input.TextFieldLineLimits&#10;import androidx.compose.foundation.text.input.rememberTextFieldState&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextFieldDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.derivedStateOf&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.navher.myapplication.R&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun LoginScreen () {&#10;    var otpvalue by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    var showOTPForm by remember { mutableStateOf(false) }&#10;&#10;    Scaffold (&#10;        containerColor = MaterialTheme.colorScheme.background,&#10;        floatingActionButton =&#10;            {&#10;                FloatingActionButton(&#10;                    onClick = { showOTPForm = !showOTPForm },&#10;                    containerColor = MaterialTheme.colorScheme.primary,&#10;                    shape = RoundedCornerShape(16.dp),&#10;&#10;                ) {&#10;                        Icon(&#10;                            painter = painterResource(id = R.drawable.arrow_back),&#10;                            contentDescription = &quot;Flecha siguiente&quot;,&#10;                            tint = MaterialTheme.colorScheme.onPrimary,&#10;                            modifier = Modifier&#10;                                .size(36.dp)&#10;                                .rotate(180f)&#10;&#10;                        )&#10;                }&#10;            }&#10;    ) { innerPadding -&gt;&#10;&#10;        Column(&#10;            modifier = Modifier.fillMaxSize().padding(innerPadding).padding(top = 16.dp, bottom = 128.dp, start = 16.dp, end = 16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(16.dp, Alignment.Bottom),&#10;        ) {&#10;            Text(&#10;                text = &quot;Introduce tu correo electrónico&quot;,&#10;                style = MaterialTheme.typography.displayMedium.copy(&#10;                    color = MaterialTheme.colorScheme.onBackground&#10;                ),&#10;            )&#10;&#10;            OutlinedTextField(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                shape = RoundedCornerShape(16.dp),&#10;                state = rememberTextFieldState(),&#10;                label = { Text(&quot;Correo electrónico&quot;) },&#10;                lineLimits = TextFieldLineLimits.SingleLine,&#10;                colors = TextFieldDefaults.colors(&#10;                    focusedIndicatorColor = Color.Transparent,&#10;                    unfocusedIndicatorColor = Color.Transparent,&#10;                    unfocusedContainerColor = MaterialTheme.colorScheme.surfaceContainer,&#10;                    focusedContainerColor = MaterialTheme.colorScheme.surfaceContainerLowest,&#10;                ),&#10;                keyboardOptions = KeyboardOptions(&#10;                    keyboardType = KeyboardType.Email&#10;                ),&#10;            )&#10;&#10;            AnimatedVisibility(&#10;                visible = showOTPForm,&#10;                enter = expandVertically(&#10;                    expandFrom = Alignment.Top&#10;                ) + fadeIn(),&#10;                exit = shrinkVertically(&#10;                    shrinkTowards = Alignment.Top&#10;                ) + fadeOut()&#10;            ) {&#10;                OTPForm()&#10;            }&#10;&#10;&#10;        }&#10;&#10;    }&#10;}&#10;&#10;@Composable&#10;fun OTPForm() {&#10;    var otpValue by remember { mutableStateOf(&quot;&quot;) }&#10;    &#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        Spacer(modifier = Modifier.height(128.dp))&#10;        Text(&#10;            text = &quot;Hemos enviado un código de 6 dígitos a tu correo. Introdúcelo a continuación.&quot;,&#10;            style = MaterialTheme.typography.bodyLarge.copy(&#10;                color = MaterialTheme.colorScheme.onBackground&#10;            ),&#10;        )&#10;&#10;        OTPTextField(&#10;            otpValue = otpValue,&#10;            onOtpValueChange = { newValue -&gt;&#10;                if (newValue.length &lt;= 6 &amp;&amp; newValue.all { it.isDigit() }) {&#10;                    otpValue = newValue&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;&#10;    }&#10;}&#10;&#10;class EmailViewModel : ViewModel() {&#10;    var email by mutableStateOf(&quot;&quot;)&#10;        private set&#10;&#10;    val emailHasErrors by derivedStateOf {&#10;        if (email.isNotEmpty()) {&#10;            // Email is considered erroneous until it completely matches EMAIL_ADDRESS.&#10;            !Patterns.EMAIL_ADDRESS.matcher(email).matches()&#10;        } else {&#10;            false&#10;        }&#10;    }&#10;&#10;    fun updateEmail(input: String) {&#10;        email = input&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ValidatingInputTextField(&#10;    email: String,&#10;    updateState: (String) -&gt; Unit,&#10;    validatorHasErrors: Boolean&#10;) {&#10;    OutlinedTextField(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(10.dp),&#10;        value = email,&#10;        onValueChange = updateState,&#10;        label = { Text(&quot;Email&quot;) },&#10;        isError = validatorHasErrors,&#10;        supportingText = {&#10;            if (validatorHasErrors) {&#10;                Text(&quot;Incorrect email format.&quot;)&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Preview&#10;@Composable&#10;fun ValidateInput() {&#10;    val emailViewModel: EmailViewModel = viewModel&lt;EmailViewModel&gt;()&#10;    ValidatingInputTextField(&#10;        email = emailViewModel.email,&#10;        updateState = { input -&gt; emailViewModel.updateEmail(input) },&#10;        validatorHasErrors = emailViewModel.emailHasErrors&#10;    )&#10;}" />
              <option name="updatedContent" value="package com.navher.myapplication.ui.screens&#10;&#10;import android.util.Patterns&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.expandVertically&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.shrinkVertically&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.BasicTextField&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.foundation.text.input.TextFieldLineLimits&#10;import androidx.compose.foundation.text.input.rememberTextFieldState&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextFieldDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.derivedStateOf&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.SolidColor&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.navher.myapplication.R&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun LoginScreen () {&#10;    var showOTPForm by remember { mutableStateOf(false) }&#10;&#10;    Scaffold (&#10;        containerColor = MaterialTheme.colorScheme.background,&#10;        floatingActionButton =&#10;            {&#10;                FloatingActionButton(&#10;                    onClick = { showOTPForm = !showOTPForm },&#10;                    containerColor = MaterialTheme.colorScheme.primary,&#10;                    shape = RoundedCornerShape(16.dp),&#10;&#10;                ) {&#10;                        Icon(&#10;                            painter = painterResource(id = R.drawable.arrow_back),&#10;                            contentDescription = &quot;Flecha siguiente&quot;,&#10;                            tint = MaterialTheme.colorScheme.onPrimary,&#10;                            modifier = Modifier&#10;                                .size(36.dp)&#10;                                .rotate(180f)&#10;&#10;                        )&#10;                }&#10;            }&#10;    ) { innerPadding -&gt;&#10;&#10;        Column(&#10;            modifier = Modifier.fillMaxSize().padding(innerPadding).padding(top = 16.dp, bottom = 128.dp, start = 16.dp, end = 16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(16.dp, Alignment.Bottom),&#10;        ) {&#10;            Text(&#10;                text = &quot;Introduce tu correo electrónico&quot;,&#10;                style = MaterialTheme.typography.displayMedium.copy(&#10;                    color = MaterialTheme.colorScheme.onBackground&#10;                ),&#10;            )&#10;&#10;            OutlinedTextField(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                shape = RoundedCornerShape(16.dp),&#10;                state = rememberTextFieldState(),&#10;                label = { Text(&quot;Correo electrónico&quot;) },&#10;                lineLimits = TextFieldLineLimits.SingleLine,&#10;                colors = TextFieldDefaults.colors(&#10;                    focusedIndicatorColor = Color.Transparent,&#10;                    unfocusedIndicatorColor = Color.Transparent,&#10;                    unfocusedContainerColor = MaterialTheme.colorScheme.surfaceContainer,&#10;                    focusedContainerColor = MaterialTheme.colorScheme.surfaceContainerLowest,&#10;                ),&#10;                keyboardOptions = KeyboardOptions(&#10;                    keyboardType = KeyboardType.Email&#10;                ),&#10;            )&#10;&#10;            AnimatedVisibility(&#10;                visible = showOTPForm,&#10;                enter = expandVertically(&#10;                    expandFrom = Alignment.Top&#10;                ) + fadeIn(),&#10;                exit = shrinkVertically(&#10;                    shrinkTowards = Alignment.Top&#10;                ) + fadeOut()&#10;            ) {&#10;                OTPForm()&#10;            }&#10;&#10;&#10;        }&#10;&#10;    }&#10;}&#10;&#10;@Composable&#10;fun OTPForm() {&#10;    var otpValue by remember { mutableStateOf(&quot;&quot;) }&#10;    &#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        Spacer(modifier = Modifier.height(128.dp))&#10;        Text(&#10;            text = &quot;Hemos enviado un código de 6 dígitos a tu correo. Introdúcelo a continuación.&quot;,&#10;            style = MaterialTheme.typography.bodyLarge.copy(&#10;                color = MaterialTheme.colorScheme.onBackground&#10;            ),&#10;        )&#10;&#10;        OTPTextField(&#10;            otpValue = otpValue,&#10;            onOtpValueChange = { newValue -&gt;&#10;                if (newValue.length &lt;= 6 &amp;&amp; newValue.all { it.isDigit() }) {&#10;                    otpValue = newValue&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun OTPTextField(&#10;    otpValue: String,&#10;    onOtpValueChange: (String) -&gt; Unit,&#10;    otpLength: Int = 6&#10;) {&#10;    BasicTextField(&#10;        value = otpValue,&#10;        onValueChange = onOtpValueChange,&#10;        keyboardOptions = KeyboardOptions(&#10;            keyboardType = KeyboardType.NumberPassword&#10;        ),&#10;        decorationBox = {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp, Alignment.CenterHorizontally)&#10;            ) {&#10;                repeat(otpLength) { index -&gt;&#10;                    val char = when {&#10;                        index &lt; otpValue.length -&gt; otpValue[index].toString()&#10;                        else -&gt; &quot;&quot;&#10;                    }&#10;                    val isFocused = index == otpValue.length&#10;                    &#10;                    Box(&#10;                        modifier = Modifier&#10;                            .width(48.dp)&#10;                            .height(56.dp)&#10;                            .border(&#10;                                width = if (isFocused) 2.dp else 1.dp,&#10;                                color = if (isFocused) &#10;                                    MaterialTheme.colorScheme.primary &#10;                                else &#10;                                    MaterialTheme.colorScheme.outline,&#10;                                shape = RoundedCornerShape(12.dp)&#10;                            )&#10;                            .background(&#10;                                color = if (isFocused)&#10;                                    MaterialTheme.colorScheme.surfaceContainerLowest&#10;                                else&#10;                                    MaterialTheme.colorScheme.surfaceContainer,&#10;                                shape = RoundedCornerShape(12.dp)&#10;                            ),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Text(&#10;                            text = char,&#10;                            style = MaterialTheme.typography.headlineMedium.copy(&#10;                                color = MaterialTheme.colorScheme.onBackground,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        },&#10;        textStyle = TextStyle(&#10;            color = Color.Transparent&#10;        ),&#10;        cursorBrush = SolidColor(Color.Transparent)&#10;    )&#10;}&#10;&#10;class EmailViewModel : ViewModel() {&#10;    var email by mutableStateOf(&quot;&quot;)&#10;        private set&#10;&#10;    val emailHasErrors by derivedStateOf {&#10;        if (email.isNotEmpty()) {&#10;            // Email is considered erroneous until it completely matches EMAIL_ADDRESS.&#10;            !Patterns.EMAIL_ADDRESS.matcher(email).matches()&#10;        } else {&#10;            false&#10;        }&#10;    }&#10;&#10;    fun updateEmail(input: String) {&#10;        email = input&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ValidatingInputTextField(&#10;    email: String,&#10;    updateState: (String) -&gt; Unit,&#10;    validatorHasErrors: Boolean&#10;) {&#10;    OutlinedTextField(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(10.dp),&#10;        value = email,&#10;        onValueChange = updateState,&#10;        label = { Text(&quot;Email&quot;) },&#10;        isError = validatorHasErrors,&#10;        supportingText = {&#10;            if (validatorHasErrors) {&#10;                Text(&quot;Incorrect email format.&quot;)&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Preview&#10;@Composable&#10;fun ValidateInput() {&#10;    val emailViewModel: EmailViewModel = viewModel&lt;EmailViewModel&gt;()&#10;    ValidatingInputTextField(&#10;        email = emailViewModel.email,&#10;        updateState = { input -&gt; emailViewModel.updateEmail(input) },&#10;        validatorHasErrors = emailViewModel.emailHasErrors&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>